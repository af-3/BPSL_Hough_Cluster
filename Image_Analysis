//
//  main.cpp
//  BSPL_Image_Analysis
//
//  Created by Alice Fockele - July 2017.
//


#include <iostream>
#include <string>

#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/opencv.hpp>
#include <opencv2/flann/flann.hpp>

using namespace std;
using namespace cv;

Mat org, grey, close_dst, grey_clean, org_thresh,drawing_dst;
vector<Vec4i> hough_lines;



Mat removeBoarder(Mat img);
void contours(Mat img, Mat drawing);
vector<Vec4i>  Probabilistic_Hough(int, void*);//, vector<Vec4i> p_lines);
void isolateSignal(vector<Mat> lst);
Mat closeImage(Mat img,int x,int y);
Point findLeftBoarder(Mat image);
Point findRightBoarder(Mat image, Point seed);

int sensorCount = 24;

int min_threshold = 20; //hough
int max_trackbar = 40; //hough
const char* probabilistic_name = "Probabilistic Hough Lines Demo";//hough
int p_trackbar = max_trackbar;//hough
RNG rng(12345);//contour



int main(int argc, const char * argv[]) {
    org = imread("../../../filtered_1pixel.png",0); //read in the source image
//    cvtColor(org, grey, CV_BGRA2GRAY);
    grey = org.clone();
    cout << "Original Size: " << org.size() << endl;
    
//---------------------------------REMOVE BOARDER---------------------------------------//

//    org = removeBoarder(org);
//    grey = removeBoarder(grey);

    cout << "Size: " << grey.size() << endl;

//----------------------------------MeanDenoise-----------------------------------------//
    
//    GaussianBlur(grey, grey, Size(1,7), 0,0);
    Mat denoise;
    fastNlMeansDenoising(grey, denoise,10,9,15);
    grey_clean = denoise.clone();
    
//---------------------------ORGANIZE COLUMNS INTO LIST---------------------------------//
    
    Mat grey2 = denoise.clone();
    vector<Mat> col_lst;
    int colPixel = grey2.cols / sensorCount;
    for (int j = 0; j<grey2.cols; j = j+colPixel) {
        col_lst.push_back(grey2.colRange(j,j+colPixel));
    }

    cout << "List Length: " << col_lst.size() << endl;
    cout << "Column Size : " << col_lst[23].size() << endl;
    
    //FOR SINGLE PIXEL IMAGE//
    for (int j = 0; j<sensorCount;j++){
        resize(col_lst[j], col_lst[j], Size(20,col_lst[j].rows),INTER_NEAREST);
    }
    Mat resized;
    hconcat(col_lst,resized);
    //END FOR SINGLE PIXEL//

//----------------------------ISOLATE SIGNAL-------------------------------------------//
    
//    isolateSignal(col_lst); //using column mat list
//
//    hconcat(col_lst, grey_clean);
//    cout <<"Size after clean: " << grey_clean.size() << endl;
    
//----------------------------CLEANUP - DILATE/ERODE(CLOSE)----------------------------//
    
    close_dst = closeImage(grey_clean,1,3);
//    threshold(close_dst, close_dst, 50, 255, THRESH_BINARY);

//----------------------------HOUGH TRANSFORM------------------------------------------//
    
    /// Create Trackbars for Thresholds
    //    char thresh_label[50];
    //    sprintf( thresh_label, "Thres: %d + input", min_threshold );
    //
    //    namedWindow( probabilistic_name, WINDOW_AUTOSIZE );
    //    createTrackbar( thresh_label, probabilistic_name, &p_trackbar, max_trackbar, Probabilistic_Hough);

    
    hough_lines = Probabilistic_Hough(0, 0);
    cout << "Number of Hough Lines: " << hough_lines.size() << endl;
    //    Mat features;
//    Mat features = Mat::zeros((int)hough_lines.size(), 2,CV_16S);
    Mat temp1, temp2;
    for( size_t i = 0; i < hough_lines.size(); i++ )
    {
//        cout << "i: " << (int)i;
        
        Vec4i l = hough_lines[i];
        temp1.push_back(l[0]);
        temp2.push_back(l[1]);
        cout << " | values: " << l[0] <<" and " << l[1] <<" | " << l[2] << " and " << l[3] << endl;
    }
    Mat features;
    hconcat(temp1, temp2, features);
    
    //FOR SINGLE PIXEL//
    cvtColor( resized, resized, COLOR_GRAY2BGR );

    for( size_t i = 0; i < hough_lines.size(); i++ )
    {
        Vec4i l = hough_lines[i];
        //        cout << "points: (" <<l[0]<<" , "<<l[1] << ") & (" <<l[2]<<" , "<<l[3] << ")"<< endl;
        line( resized, Point(l[0]*20+5, l[1]), Point(l[2]*20+5, l[3]), Scalar(255,0,0), 3, LINE_AA);
    }
    imwrite("hough_probabilistic_output.png",resized);


//    cout << "features: " << features.size() << endl << features << endl;

//    cv::Mat centers;// = cvCreateMat(1000, descriptorDims, CV_32FC1);
//    cvflann::KMeansIndexParams k_params = cvflann::KMeansIndexParams();
//    cv::flann::AutotunedIndexParams atp = cv::flann::AutotunedIndexParams();
//    int numClusters = cv::flann::hierarchicalClustering<float, float>(features, centers, k_params);
//-----------------------------------CONTOURS------------------------------------------//
    
    contours(close_dst,drawing_dst);

    
//-----------------------------------DISPLAY-------------------------------------------//

    
    imshow("Original", org);
    imshow("Denoise - Without IsolateNoise()",denoise);
//    imshow("Clean - After IsolateNoise()",grey_clean);
    imshow("Morph-Close", close_dst);
    imwrite("filtered_image.png", denoise);
//    Mat resized;
//    resize(denoise, resized, Size(24*20,600),INTER_NEAREST);
    imshow("Resized", resized);
    
    waitKey();
    return(0);
}

//--------------------------------------------------------------------------------------//
//--------------------------------------------------------------------------------------//
//FUNCTIONS
//--------------------------------------------------------------------------------------//
//--------------------------------------------------------------------------------------//


Mat removeBoarder(Mat img){
    Point seedL, seedR;
    Mat img_grey,dst;
    if (img.channels() == 3)
    {
        cvtColor(img, img_grey, CV_BGR2GRAY);
    }
    else
    {
        img_grey = img.clone();
    }
    seedL = findLeftBoarder(img_grey);
    seedR = findRightBoarder(img_grey, seedL);
    if ( (seedR.x-seedL.x) % 2 == 0)
    {
        dst = img.colRange(Range(seedL.x+1,seedR.x-1));
        dst = dst.rowRange(Range(seedL.y+10,seedR.y-10));
    }
    else
    {
        dst = img.colRange(Range(seedL.x+1,seedR.x-2));
        dst = dst.rowRange(Range(seedL.y+10,seedR.y-10));
    }
    
//    dst = img.colRange(Range(seedL.x+2,seedR.x-2));
//    dst = dst.rowRange(Range(seedL.y+10,seedR.y-10));
    return dst;
}

void isolateSignal(vector<Mat> lst){
    double minVal; double maxVal;
    for (int i = 0; i<sensorCount; i++) {
//        GaussianBlur(lst[i], lst[i], Size(1,7), 10);
//        medianBlur(lst[i], lst[i], 3);
        
//        fastNlMeansDenoising(lst[i], lst[i],10,7,21);

        
        int center = lst[i].cols/2;
        cv:Scalar avg = mean(lst[i].col(center));
        float avgVal = avg.val[0];
//        cout << "mean: " << avgVal << endl;
        
        minMaxLoc( lst[i].col(center), &minVal, &maxVal ); //find max value in center of column
//        cout << "Min/Max for column: " << minVal << " - " << maxVal << endl;
//        int threshold = 0.75*maxVal;//minVal + 0.75*(maxVal-minVal);//
        cv::threshold(lst[i], lst[i], avgVal+10, 0, THRESH_TOZERO);
    }
}
Point findLeftBoarder(Mat image)
{
    int i,j;
    Point seed;
    bool found = false;
    for(i=0;i<image.rows; ++i){
        if(found == true){
            break;
        }
        for(j=0; j<image.cols;++j){
            if(image.at<uchar>(i,j) < 225){
                seed = Point(j,i);
                found = true;
                break;
            }
        }
    }
    //    seed = Point(seed.x,seed.y);
    return seed;
}

Point findRightBoarder(Mat image, Point seed_in)
{
    int i = seed_in.y;
    Point seed_out;
    for(int j=seed_in.x; j<(image.cols);++j){
        if(image.at<uchar>(i,j) == 255){
            seed_out = Point(j,i);
            break;
        }
    }
    for(int k = seed_out.y; k<(image.rows);++k){
        if(image.at<uchar>(k,seed_out.x-1) == 255){
            seed_out.y = k;
            break;
        }
    }
    //    seed = Point(seed.x,seed.y);

    return seed_out;
}

Mat closeImage(Mat img,int x,int y){
    Mat kernel = Mat::ones(x,y,CV_8U);
    Mat dst;
    dilate(img, dst, kernel,Point(-1,-1), 1);
    erode(dst, dst, kernel, Point(-1,-1), 1);
    return dst;
}

vector<Vec4i> Probabilistic_Hough(int, void*) // from opencv samples
{
    vector<Vec4i> p_lines;
    Mat edges,probabilistic_hough;
//    Canny( grey_clean, edges, 50, 200, 3 );
    threshold(grey_clean, edges, 50, 255, THRESH_BINARY);
    cvtColor( edges, probabilistic_hough, COLOR_GRAY2BGR );

    /// 2. Use Probabilistic Hough Transform
    HoughLinesP( edges, p_lines, 1, CV_PI, 50, 30, 50);

//    HoughLinesP( edges, p_lines, 1, CV_PI, min_threshold + p_trackbar, 30, 50); //to use with trackbar

    /// Show the result
    for( size_t i = 0; i < p_lines.size(); i++ )
    {
        Vec4i l = p_lines[i];
//        cout << "points: (" <<l[0]<<" , "<<l[1] << ") & (" <<l[2]<<" , "<<l[3] << ")"<< endl;
        line( probabilistic_hough, Point(l[0], l[1]), Point(l[2], l[3]), Scalar(255,0,0), 3, LINE_AA);
    }

    imshow( probabilistic_name, probabilistic_hough );
    return p_lines;
}

void contours(Mat img, Mat drawing)
{
    Mat edges;
    int low_thresh = 20;
    vector<vector<Point> > contours;
    vector<Vec4i> hierarchy;
    
    /// Detect edges using Threshold
    Canny( img, edges, low_thresh, low_thresh*3 , 3 );
    
    /// Find contours
    findContours( edges, contours, hierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE, Point(0, 0) );
    
    /// Find the convex hull object for each contour
    vector<vector<Point> >hull( contours.size() );
    for( size_t i = 0; i < contours.size(); i++ )
    {   convexHull( Mat(contours[i]), hull[i], false ); }
    
    /// Draw contours + hull results
    vector<vector<Point> > contours_poly( contours.size() );
    vector<Rect> boundRect( contours.size() );
    drawing = Mat::zeros( edges.size(), CV_8UC3 );
    for( size_t i = 0; i< contours.size(); i++ )
    {
        approxPolyDP( Mat(contours[i]), contours_poly[i], 3, true );
        boundRect[i] = boundingRect( Mat(contours_poly[i]) );
        Scalar color = Scalar( rng.uniform(0, 255), rng.uniform(0,255), rng.uniform(0,255) );
//        Scalar color = Scalar(159,176,113);
        drawContours( drawing, contours_poly, i, color, 1, 8, vector<Vec4i>(), 0, Point() );
        rectangle( drawing, boundRect[i].tl(), boundRect[i].br(), color, 2, 8, 0 );
        //        drawContours( drawing, hull, (int)i, color, 1, 8, vector<Vec4i>(), 0, Point() );
    }
    
    /// Show in a window
//    namedWindow( "Hull demo", WINDOW_AUTOSIZE );
    imshow( "Hull demo", drawing );
}

//    rotate(grey_clean, grey_clean, ROTATE_90_CLOCKWISE);
//    circle(org, seedL, 20, Scalar(0,0,0),2);
//    circle(org, seedR, 20, Scalar(0,0,0),2);
//    inRange(org, Scalar(0,0,10), Scalar(255,255,255), org_thresh);
